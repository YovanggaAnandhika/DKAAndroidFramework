plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id "maven-publish"
    id 'signing'
}

group = "com.dkaresearchcenter.dkaframework"
version = "1.0.5"

android {
    namespace 'com.dkaresearchcenter.dkaframework'
    compileSdk 33

    publishing {
        singleVariant('release') {
            withSourcesJar()
            withJavadocJar()
        }
        // ...
    }

    defaultConfig {
        minSdk 24
        targetSdk 33

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}




dependencies {
    implementation 'androidx.core:core-ktx:1.10.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.8.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}

task androidSourcesJar(type: Jar) {
    //archiveClassifier.set('sources')
    if (project.plugins.findPlugin("com.android.library")) {
        // For Android libraries
        from android.sourceSets.main.java.srcDirs
        from android.sourceSets.main.kotlin.srcDirs
    } else {
        // For pure Kotlin libraries, in case you have them
        from sourceSets.main.java.srcDirs
        from sourceSets.main.kotlin.srcDirs
    }
}

artifacts {
    archives androidSourcesJar
}


afterEvaluate {
    publishing {
        publications {
            // Creates a Maven publication called "release".
            release(MavenPublication) {
                // Applies the component for the release build variant.
                // Two artifacts, the `aar` (or `jar`) and the sources
                if (project.plugins.findPlugin("com.android.library")) {
                    from components.release
                } else {
                    from components.java
                }

                artifact androidSourcesJar

                // You can then customize attributes of the publication as shown below.
                groupId = 'com.dkaresearchcenter.dkaframework'
                artifactId = 'core'
                version = '1.0.0.5'

                //println("test " + publishing.publications[0])
            }
            println("Components: " + components*.name)
        }
    }
    signing {
        useInMemoryPgpKeys(
                rootProject.ext["signing.keyId"],
                rootProject.ext["signing.key"],
                rootProject.ext["signing.password"],
        )
        //println(publishing.publications)
        sign publishing.publications
        //println('root config' + rootProject.ext["signing.key"])
        //println(publishing.publications)
    }
}


nexusPublishing {
    repositoryDescription = "Dev Test"
    repositories {
        sonatype {  //only for users registered in Sonatype after 24 Feb 2021
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
            username = ossrhUsername
            password = ossrhPassword
            //stagingProfileId = sonatypeStagingProfileId
        }
    }
}

/*nexusStaging {
    username = ossrhUsername
    password = ossrhPassword
    serverUrl = "https://s01.oss.sonatype.org/service/local/" //required only for projects registered in Sonatype after 2021-02-24
    packageGroup = "com.dkaresearchcenter.dkaframework" //optional if packageGroup == project.getGroup()
    //stagingProfileId = "yourStagingProfileId" //when not defined will be got from server using "packageGroup"
}*/





